{"ast":null,"code":"// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport axios from \"axios\";\n\nasync function scrape(req, res) {\n  if (req.method === \"POST\") {\n    const {\n      urls\n    } = req.body;\n    const urlArray = urls.split(\",\").map(rawUrl => {\n      const url = rawUrl.trim();\n\n      if (url[0] === \"h\" && url[1] === \"t\" && url[2] === \"t\" && url[3] === \"p\") {\n        return url;\n      }\n\n      return \"https://\".concat(url);\n    });\n    const results = await Promise.allSettled(urlArray.map(url => axios(url)));\n    const formattedResponse = results.map((response, index) => {\n      var _response$value, _response$reason;\n\n      return {\n        url: urlArray[index],\n        html: (_response$value = response.value) === null || _response$value === void 0 ? void 0 : _response$value.data,\n        error: (_response$reason = response.reason) === null || _response$reason === void 0 ? void 0 : _response$reason.message\n      };\n    });\n    res.status(200).json(formattedResponse);\n  }\n}\n\nexport default scrape;","map":{"version":3,"sources":["/Users/steph/Desktop/coding-challenge/pages/api/scrape.js"],"names":["axios","scrape","req","res","method","urls","body","urlArray","split","map","rawUrl","url","trim","concat","results","Promise","allSettled","formattedResponse","response","index","html","value","data","error","reason","message","status","json"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAeC,MAAf,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAM;AAAEC,MAAAA;AAAF,QAAWH,GAAG,CAACI,IAArB;AAEA,UAAMC,QAAQ,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAqBC,MAAD,IAAY;AAC/C,YAAMC,GAAG,GAAGD,MAAM,CAACE,IAAP,EAAZ;;AACA,UACED,GAAG,CAAC,CAAD,CAAH,KAAW,GAAX,IACAA,GAAG,CAAC,CAAD,CAAH,KAAW,GADX,IAEAA,GAAG,CAAC,CAAD,CAAH,KAAW,GAFX,IAGAA,GAAG,CAAC,CAAD,CAAH,KAAW,GAJb,EAKE;AACA,eAAOA,GAAP;AACD;;AACD,aAAO,WAAWE,MAAX,CAAkBF,GAAlB,CAAP;AACD,KAXgB,CAAjB;AAaA,UAAMG,OAAO,GAAG,MAAMC,OAAO,CAACC,UAAR,CAAmBT,QAAQ,CAACE,GAAT,CAAcE,GAAD,IAASX,KAAK,CAACW,GAAD,CAA3B,CAAnB,CAAtB;AAEA,UAAMM,iBAAiB,GAAGH,OAAO,CAACL,GAAR,CAAY,CAACS,QAAD,EAAWC,KAAX;AAAA;;AAAA,aAAsB;AAC1DR,QAAAA,GAAG,EAAEJ,QAAQ,CAACY,KAAD,CAD6C;AAE1DC,QAAAA,IAAI,qBAAEF,QAAQ,CAACG,KAAX,oDAAE,gBAAgBC,IAFoC;AAG1DC,QAAAA,KAAK,sBAAEL,QAAQ,CAACM,MAAX,qDAAE,iBAAiBC;AAHkC,OAAtB;AAAA,KAAZ,CAA1B;AAKAtB,IAAAA,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBV,iBAArB;AACD;AACF;;AAED,eAAehB,MAAf","sourcesContent":["// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport axios from \"axios\";\n\nasync function scrape(req, res) {\n  if (req.method === \"POST\") {\n    const { urls } = req.body;\n\n    const urlArray = urls.split(\",\").map((rawUrl) => {\n      const url = rawUrl.trim();\n      if (\n        url[0] === \"h\" &&\n        url[1] === \"t\" &&\n        url[2] === \"t\" &&\n        url[3] === \"p\"\n      ) {\n        return url;\n      }\n      return \"https://\".concat(url);\n    });\n\n    const results = await Promise.allSettled(urlArray.map((url) => axios(url)));\n\n    const formattedResponse = results.map((response, index) => ({\n      url: urlArray[index],\n      html: response.value?.data,\n      error: response.reason?.message,\n    }));\n    res.status(200).json(formattedResponse);\n  }\n}\n\nexport default scrape;\n"]},"metadata":{},"sourceType":"module"}