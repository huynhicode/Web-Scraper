{"ast":null,"code":"// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport axios from \"axios\";\n\nfunction scrape(req, res) {\n  if (req.method === \"POST\") {\n    const {\n      urls\n    } = req.body;\n    const urlArray = urls.split(\",\").map(rawUrl => {\n      const url = rawUrl.trim();\n\n      if (url.startsWith(\"http\")) {\n        return url;\n      }\n\n      return \"https://\".concat(url);\n    });\n    const promiseArray = urlArray.map(url => axios(url));\n    Promise.allSettled(promiseArray).then(results => {\n      console.log(results);\n      const formattedResponse = results.map((response, index) => {\n        var _response$value, _response$reason;\n\n        return {\n          url: urlArray[index],\n          html: (_response$value = response.value) === null || _response$value === void 0 ? void 0 : _response$value.data,\n          error: (_response$reason = response.reason) === null || _response$reason === void 0 ? void 0 : _response$reason.message\n        };\n      });\n      res.status(200).json(formattedResponse);\n    });\n  }\n}\n\nexport default scrape;","map":{"version":3,"sources":["/Users/steph/Desktop/coding-challenge/pages/api/scrape.js"],"names":["axios","scrape","req","res","method","urls","body","urlArray","split","map","rawUrl","url","trim","startsWith","concat","promiseArray","Promise","allSettled","then","results","console","log","formattedResponse","response","index","html","value","data","error","reason","message","status","json"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACxB,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAM;AAAEC,MAAAA;AAAF,QAAWH,GAAG,CAACI,IAArB;AAEA,UAAMC,QAAQ,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAqBC,MAAD,IAAY;AAC/C,YAAMC,GAAG,GAAGD,MAAM,CAACE,IAAP,EAAZ;;AACA,UAAID,GAAG,CAACE,UAAJ,CAAe,MAAf,CAAJ,EAA4B;AAC1B,eAAOF,GAAP;AACD;;AACD,aAAO,WAAWG,MAAX,CAAkBH,GAAlB,CAAP;AACD,KANgB,CAAjB;AAQA,UAAMI,YAAY,GAAGR,QAAQ,CAACE,GAAT,CAAcE,GAAD,IAASX,KAAK,CAACW,GAAD,CAA3B,CAArB;AAEAK,IAAAA,OAAO,CAACC,UAAR,CAAmBF,YAAnB,EAAiCG,IAAjC,CAAuCC,OAAD,IAAa;AACjDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,YAAMG,iBAAiB,GAAGH,OAAO,CAACV,GAAR,CAAY,CAACc,QAAD,EAAWC,KAAX;AAAA;;AAAA,eAAsB;AAC1Db,UAAAA,GAAG,EAAEJ,QAAQ,CAACiB,KAAD,CAD6C;AAE1DC,UAAAA,IAAI,qBAAEF,QAAQ,CAACG,KAAX,oDAAE,gBAAgBC,IAFoC;AAG1DC,UAAAA,KAAK,sBAAEL,QAAQ,CAACM,MAAX,qDAAE,iBAAiBC;AAHkC,SAAtB;AAAA,OAAZ,CAA1B;AAKA3B,MAAAA,GAAG,CAAC4B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBV,iBAArB;AACD,KARD;AASD;AACF;;AAED,eAAerB,MAAf","sourcesContent":["// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport axios from \"axios\";\n\nfunction scrape(req, res) {\n  if (req.method === \"POST\") {\n    const { urls } = req.body;\n\n    const urlArray = urls.split(\",\").map((rawUrl) => {\n      const url = rawUrl.trim();\n      if (url.startsWith(\"http\")) {\n        return url;\n      }\n      return \"https://\".concat(url);\n    });\n\n    const promiseArray = urlArray.map((url) => axios(url));\n\n    Promise.allSettled(promiseArray).then((results) => {\n      console.log(results);\n      const formattedResponse = results.map((response, index) => ({\n        url: urlArray[index],\n        html: response.value?.data,\n        error: response.reason?.message,\n      }));\n      res.status(200).json(formattedResponse);\n    });\n  }\n}\n\nexport default scrape;\n"]},"metadata":{},"sourceType":"module"}